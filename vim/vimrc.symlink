function! SourceIfExists(file)
    if filereadable(expand(a:file))
        exe 'source' a:file
    endif
endfunction

let is_bdi = !empty($BDI)

"""""""""" 'Vanilla' bindings
inoremap jk <ESC>
nnoremap <SPACE> <Nop>
let mapleader = " "
syntax on           " highlight syntax
set number          " show line numbers
set noswapfile      " disable the swapfile
set laststatus=2    " shows the filename in the status bar
set wildmenu        " Autocomplete menu
set mouse=a

" Search
set hlsearch        " highlight search results
nnoremap <leader>/ :let @/ = ""<CR> " clear the search highlighting
set incsearch       " show search results as you type

" Tabbing
set tabstop     =4  " Width of tab character
set softtabstop =4  " Fine tunes the amount of white space to be added
set shiftwidth  =4  " Determines the amount of whitespace to add in normal mode
autocmd FileType cfg set noexpandtab
set expandtab       " When this option is enabled, vi will use spaces instead of tabs

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-e>

" Move lines up and down easily
nnoremap <C-k> :m .-2<CR>
nnoremap <C-j> :m .+1<CR>

" Special case the vimrc.symlink to be vim syntax
augroup symlink_filetypes
    autocmd BufNewFile,BufRead *vim*.symlink set syntax=vim
augroup END

" Easily switch tabs with Alt+h and Alt+j
" These weird characters are determined by testing what is getting set to my
" terminal when I press the Alt key. See:
" https://vi.stackexchange.com/questions/2350/how-to-map-alt-key
execute "set <A-h>=\033h"
execute "set <A-l>=\033l"
nnoremap <A-h> gT
nnoremap <A-l> gt

""""""""""" Plugins
" Install vim-plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')
" Git support
Plug 'tpope/vim-fugitive'
" Dark theme
Plug 'rafi/awesome-vim-colorschemes'
"Better C++ highlighting
Plug 'bfrg/vim-cpp-modern'
" YouCompleteMe
Plug 'ycm-core/YouCompleteMe'
" AutoClose parens/braces/etc.
Plug 'Townk/vim-autoclose'
" ClangFormat
Plug 'Chiel92/vim-autoformat'
" File tree
Plug 'preservim/nerdtree'
" Commenting
Plug 'preservim/nerdcommenter'
" Nice tmux + vim integration
Plug 'preservim/vimux'
" Delete buffers without screwing up the layout (optional dependency of vim-symlink)
Plug 'moll/vim-bbye'
" Symlinks
Plug 'aymericbeaumet/vim-symlink'
" Customized Plugins
if is_bdi
    call SourceIfExists('~/dotfiles/vim/bdi_plug.vim')
else
    call SourceIfExists('~/dotfiles/vim/personal_plug.vim')
endif
call plug#end()

"""""""""" Color Scheme
colorscheme onedark

"""""""""" Autoformat
augroup autoformat
    autocmd BufWrite * :Autoformat
    noremap <leader>cl :Autoformat<CR>
    let g:autoformat_verbosemode=0
augroup END

"""""""""" YouCompleteMe
" Go to definition with YouCompleteMe
nnoremap gf :YcmCompleter GoToDefinition<CR>
nnoremap gl :YcmCompleter GoToDeclaration<CR>

"""""""""" NERDCommenter
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Ctrl-/ to toggle comments (Note the underscore is a hack because of the
" characters that are actually sent to the terminal)
nnoremap <C-_> :call NERDComment(0,"toggle")<CR>
vnoremap <C-_> :call NERDComment(0,"toggle")<CR>

"""""""""""" NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"""""""""""" Vimux
map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

"""""""""""" Customized Settings
if is_bdi
    call SourceIfExists("~/dotfiles/vim/bdi.vim")
else
    call SourceIfExists("~/dotfiles/vim/personal.vim")
endif
